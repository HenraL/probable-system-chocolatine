# Original repository: https://github.com/HenraL/probable-system-chocolatine
name: chocolatine
on:
  push:
    branches-ignore:
      - 'ga-ignore-**'
  pull_request:
    branches-ignore:
      - 'ga-ignore-**'
jobs:
  check_repository_cleanliness:
    runs-on: ubuntu-latest
    steps:
      - name: cloning directory into the machine
        uses: actions/checkout@v2
      - name: error_output
        run: echo "::error file=,line=1,endLine=0,title=Check if the repository is clean and void of any unwanted files (temp\nfiles, binary files, etc.)::Process completed with exit code 1"
      - name: check_repository_cleanliness
        run: |
            for FILE in *
            do
              if [[ "$FILE" == *"~"* ]]
              then
                echo "::error file=$FILE,line=1,endLine=0,title=Unwanted file detected::$FILE"
              fi
              if [[ "${FILE,,}" == *"pain_au_chocolat"* ]]
              then
                echo "::error file=$FILE,line=1,endLine=0,title=Unwanted file detected::$FILE"
              fi
              if [[ "$FILE" == *"#"* ]]
              then
                echo "::error file=$FILE,line=1,endLine=0,title=Unwanted file detected::$FILE"
              fi
              if [[ "$FILE" == *".exe" ]]
              then
                echo "::error file=$FILE,line=1,endLine=0,title=Unwanted file detected::$FILE"
              fi
              if [[ "$FILE" == *".sh" ]]
              then
                echo "::error file=$FILE,line=1,endLine=0,title=Unwanted file detected::$FILE"
              fi
              if [[ "$FILE" == *".so" ]]
              then
                echo "::error file=$FILE,line=1,endLine=0,title=Unwanted file detected::$FILE"
              fi
              if [[ "$FILE" == *".o" ]]
              then
                echo "::error file=$FILE,line=1,endLine=0,title=Unwanted file detected::$FILE"
              fi
              if [[ "$FILE" == *".gcda" ]]
              then
                echo "::error file=$FILE,line=1,endLine=0,title=Unwanted file detected::$FILE"
              fi
              if [[ "$FILE" == *".gcov" ]]
              then
                echo "::error file=$FILE,line=1,endLine=0,title=Unwanted file detected::$FILE"
              fi
              if [[ "$FILE" == "tmp" ]]
              then
                echo "::error file=$FILE,line=1,endLine=0,title=Unwanted file detected::$FILE"
              fi
              if [[ "$FILE" == *".a" ]]
              then
                echo "::error file=$FILE,line=1,endLine=0,title=Unwanted file detected::$FILE"
              fi
              if [[ "$FILE" == *"-;"* ]]
              then
                echo "::error file=$FILE,line=1,endLine=0,title=Unwanted file detected::$FILE"
              fi
              if [[ "$FILE" == *".gcno" ]]
              then
                echo "::error file=$FILE,line=1,endLine=0,title=Unwanted file detected::$FILE"
              fi
              if [[ "$FILE" == *".sh" ]]
              then
                echo "::error file=$FILE,line=1,endLine=0,title=Unwanted file detected::$FILE"
              fi
            done

      - name: check_program_compilation
        uses: docker://alpine:3.8
      - name: run_tests
        uses: docker://docker.io/epitechcontent/epitest-docker:latest

  to_gitlab:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            https://github.com/HenraL/probable-system-chocolatine.git
          ssh_private_key:
            git@github.com:HenraL/probable-system-chocolatine.git

  to_codecommit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        name: push_to_mirror
        with:
          target_repo_url:
            https://github.com/HenraL/probable-system-chocolatine.git
          ssh_private_key:
            git@github.com:HenraL/probable-system-chocolatine.git
          ssh_username:
            ${{ secrets.SECRET_KEY }}
